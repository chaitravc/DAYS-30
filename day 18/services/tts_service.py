import logging
from murf import Murf
from dotenv import load_dotenv
import os
import requests

# Configure logging
logger = logging.getLogger(__name__)

# Load environment variables
load_dotenv()

class TextToSpeechService:
    def __init__(self):
        self.api_key = os.getenv("MURF_API_KEY")
        if not self.api_key:
            logger.warning("MURF_API_KEY not found in .env file.")
        self.client = Murf(api_key=self.api_key) if self.api_key else None

    async def generate_speech(self, text: str, voice_id: str, style: str) -> str:
        """Generate speech from text using Murf."""
        if not self.api_key or not self.client:
            raise ValueError("Murf API key is missing.")
        try:
            response = self.client.text_to_speech.generate(
                text=text,
                voice_id=voice_id,
                style=style
            )
            if not response.audio_file:
                raise ValueError("No audio generated by Murf.")
            return response.audio_file
        except requests.RequestException as e:
            logger.error(f"Network error during TTS: {str(e)}")
            raise
        except Exception as e:
            logger.error(f"Unexpected TTS error: {str(e)}")
            raise